		     +--------------------------+
		     |            OS            |
		     | PROJECT 2: USER PROGRAMS |
		     |     DESIGN DOCUMENT      |
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kevin Vong <s8kevong@stud.uni-saarland.de>
Kaleem Ullah <s8kaulla@stud.uni-saarland.de>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

To implement argument parsing, we split the given command line into tokens,
delimited by spaces, using the suggested strtok_r function. To put the args
in the right order, we pushed the argument values from left to right first.
After that, we looped backwards through the arguments and pushed the
addresses onto the stack. This ensured that the last argument address
pushed on the stack was actually argv[0], the next was argv[1], and etc.
To avoid overflowing the stack page, we added a check for the size of
the args. We only allow arguments that fit within a 4kB page.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The method strtok() uses a global variable to keep track of the current
position in the given string. With Pintos, we can have multiple threads
that might be accessing the string at once, which would mess up this
global pointer. Thus, strtok_r() is the only implementation because
it ensures that each thread keeps track of its own position within the
string.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

One advantage is that the kernel has to do less processing in order to
separate the commands. Although the load is transferred onto the shell,
saving computational time for the kernel thread is always nice. Another
advantage is that the shell can parse the command line into more advanced
calls to the kernels. For example, in Unix systems, you can chain
multiple executables by piping with '|'.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct lock filesys_mutex;
This is used for synchronization regarding file i/o system calls.

bool parent_wait
This is used to tell a child process that it needs to inform its parent
when it is done executing.

int child_status
This indicates to the parent thread whether its child loaded successfully
or not. Used in exec().

struct semaphore child_sema
Used to wait for a child process to finish executing. Used in process_wait().

struct semaphore child_load_sema
Used to wait for a child process to finish loading. Used in exec().

struct list childlist
Used to track status values of child processes. Also allows a parent
to wait for an already dead child thread. Used in exit() and wait()

struct thread *parent
Used to access the parent thread's childlist, updating its values.
Used in exit() and exec().

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are kept in a list, exclusive to each process. This means
that one process cannot use another process's fd to read from the same file.
An open file can also have more than one file descriptor, if a process
opens the same file multiple times.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

To read user data, we first check the validity of the arguments the user
passes in. Then, we grab the file system lock to ensure correct
syncronization. Next, we find the desired file and read from it. 
To write user data, we again check the validity of the user's arguments
and grab the file system lock. We find the desired file and write to it.
Notably, we do not allow reads from stdout or writes to stdin because
that would result in the kernel waiting forever for input.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
The worst possible case is that 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
